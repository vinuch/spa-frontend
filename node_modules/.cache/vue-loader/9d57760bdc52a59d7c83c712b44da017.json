{"remainingRequest":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/src/App.vue","mtime":1586769454134},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}