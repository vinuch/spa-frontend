{"remainingRequest":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/babel-loader/lib/index.js!/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/mac/Documents/projects/buildForSDG-assesement-submission/src/estimator.js","dependencies":[{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/src/estimator.js","mtime":1586744924499},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Documents/projects/buildForSDG-assesement-submission/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYyI7CgpmdW5jdGlvbiBnZXRGYWN0b3IocGVyaW9kVHlwZSwgdGltZSkgewogIHZhciBmYWN0b3I7CgogIGlmIChwZXJpb2RUeXBlID09PSAnZGF5cycpIHsKICAgIGZhY3RvciA9IE1hdGguZmxvb3IodGltZSAvIDMpOwogIH0gZWxzZSBpZiAocGVyaW9kVHlwZSA9PT0gJ3dlZWtzJykgewogICAgZmFjdG9yID0gTWF0aC5mbG9vcih0aW1lIC8gMyk7CiAgfSBlbHNlIGlmIChwZXJpb2RUeXBlID09PSAnbW9udGhzJykgewogICAgZmFjdG9yID0gTWF0aC5mbG9vcih0aW1lIC8gMyk7CiAgfSBlbHNlIHsKICAgIHJldHVybiAnSW52YWxpZCBkYXRhIHR5cGUnOwogIH0KCiAgcmV0dXJuIGZhY3RvcjsKfQoKZnVuY3Rpb24gY29udmVydFRvRGF5cyhwZXJpb2RUeXBlLCB0aW1lKSB7CiAgdmFyIG51bU9mRGF5czsKCiAgaWYgKHBlcmlvZFR5cGUgPT09ICdkYXlzJykgewogICAgbnVtT2ZEYXlzID0gdGltZTsKICB9IGVsc2UgaWYgKHBlcmlvZFR5cGUgPT09ICd3ZWVrcycpIHsKICAgIG51bU9mRGF5cyA9IHRpbWUgKiA3OwogIH0gZWxzZSBpZiAocGVyaW9kVHlwZSA9PT0gJ21vbnRocycpIHsKICAgIG51bU9mRGF5cyA9IHRpbWUgKiAzMDsKICB9IGVsc2UgewogICAgcmV0dXJuICdJbnZhbGlkIGRhdGEgdHlwZSc7CiAgfQoKICByZXR1cm4gbnVtT2ZEYXlzOwp9Cgp2YXIgY292aWQxOUltcGFjdEVzdGltYXRvciA9IGZ1bmN0aW9uIGNvdmlkMTlJbXBhY3RFc3RpbWF0b3IoZGF0YSkgewogIHZhciBpbnB1dCA9IGRhdGE7CiAgaW5wdXQudGltZVRvRWxhcHNlID0gY29udmVydFRvRGF5cyhpbnB1dC5wZXJpb2RUeXBlLCBpbnB1dC50aW1lVG9FbGFwc2UpOwogIHJldHVybiB7CiAgICBkYXRhOiBpbnB1dCwKICAgIGltcGFjdDogewogICAgICBjdXJyZW50bHlJbmZlY3RlZDogaW5wdXQucmVwb3J0ZWRDYXNlcyAqIDEwLAoKICAgICAgZ2V0IGluZmVjdGlvbnNCeVJlcXVlc3RlZFRpbWUoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudGx5SW5mZWN0ZWQgKiBNYXRoLnBvdygyLCBnZXRGYWN0b3IoaW5wdXQucGVyaW9kVHlwZSwgaW5wdXQudGltZVRvRWxhcHNlKSk7CiAgICAgIH0sCgogICAgICBnZXQgc2V2ZXJlQ2FzZXNCeVJlcXVlc3RlZFRpbWUoKSB7CiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoMTUgKiB0aGlzLmluZmVjdGlvbnNCeVJlcXVlc3RlZFRpbWUgLyAxMDApOwogICAgICB9LAoKICAgICAgZ2V0IGhvc3BpdGFsQmVkc0J5UmVxdWVzdGVkVGltZSgpIHsKICAgICAgICByZXR1cm4gTWF0aC50cnVuYygzNSAqIGlucHV0LnRvdGFsSG9zcGl0YWxCZWRzIC8gMTAwIC0gdGhpcy5zZXZlcmVDYXNlc0J5UmVxdWVzdGVkVGltZSk7CiAgICAgIH0sCgogICAgICBnZXQgY2FzZXNGb3JJQ1VCeVJlcXVlc3RlZFRpbWUoKSB7CiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoNSAqIHRoaXMuaW5mZWN0aW9uc0J5UmVxdWVzdGVkVGltZSAvIDEwMCk7CiAgICAgIH0sCgogICAgICBnZXQgY2FzZXNGb3JWZW50aWxhdG9yc0J5UmVxdWVzdGVkVGltZSgpIHsKICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigyICogdGhpcy5pbmZlY3Rpb25zQnlSZXF1ZXN0ZWRUaW1lIC8gMTAwKTsKICAgICAgfSwKCiAgICAgIGdldCBkb2xsYXJzSW5GbGlnaHQoKSB7CiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmModGhpcy5pbmZlY3Rpb25zQnlSZXF1ZXN0ZWRUaW1lICogaW5wdXQucmVnaW9uLmF2Z0RhaWx5SW5jb21lUG9wdWxhdGlvbiAqIGlucHV0LnJlZ2lvbi5hdmdEYWlseUluY29tZUluVVNEIC8gaW5wdXQudGltZVRvRWxhcHNlKTsKICAgICAgfQoKICAgIH0sCiAgICBzZXZlcmVJbXBhY3Q6IHsKICAgICAgY3VycmVudGx5SW5mZWN0ZWQ6IGlucHV0LnJlcG9ydGVkQ2FzZXMgKiA1MCwKCiAgICAgIGdldCBpbmZlY3Rpb25zQnlSZXF1ZXN0ZWRUaW1lKCkgewogICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRseUluZmVjdGVkICogTWF0aC5wb3coMiwgZ2V0RmFjdG9yKGlucHV0LnBlcmlvZFR5cGUsIGlucHV0LnRpbWVUb0VsYXBzZSkpOwogICAgICB9LAoKICAgICAgZ2V0IHNldmVyZUNhc2VzQnlSZXF1ZXN0ZWRUaW1lKCkgewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKDE1ICogdGhpcy5pbmZlY3Rpb25zQnlSZXF1ZXN0ZWRUaW1lIC8gMTAwKTsKICAgICAgfSwKCiAgICAgIGdldCBob3NwaXRhbEJlZHNCeVJlcXVlc3RlZFRpbWUoKSB7CiAgICAgICAgcmV0dXJuIE1hdGgudHJ1bmMoMzUgKiBpbnB1dC50b3RhbEhvc3BpdGFsQmVkcyAvIDEwMCAtIHRoaXMuc2V2ZXJlQ2FzZXNCeVJlcXVlc3RlZFRpbWUpOwogICAgICB9LAoKICAgICAgZ2V0IGNhc2VzRm9ySUNVQnlSZXF1ZXN0ZWRUaW1lKCkgewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKDUgKiB0aGlzLmluZmVjdGlvbnNCeVJlcXVlc3RlZFRpbWUgLyAxMDApOwogICAgICB9LAoKICAgICAgZ2V0IGNhc2VzRm9yVmVudGlsYXRvcnNCeVJlcXVlc3RlZFRpbWUoKSB7CiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoMiAqIHRoaXMuaW5mZWN0aW9uc0J5UmVxdWVzdGVkVGltZSAvIDEwMCk7CiAgICAgIH0sCgogICAgICBnZXQgZG9sbGFyc0luRmxpZ2h0KCkgewogICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMuaW5mZWN0aW9uc0J5UmVxdWVzdGVkVGltZSAqIGlucHV0LnJlZ2lvbi5hdmdEYWlseUluY29tZVBvcHVsYXRpb24gKiBpbnB1dC5yZWdpb24uYXZnRGFpbHlJbmNvbWVJblVTRCAvIGlucHV0LnRpbWVUb0VsYXBzZSk7CiAgICAgIH0KCiAgICB9CiAgfTsKfTsKCmV4cG9ydCBkZWZhdWx0IGNvdmlkMTlJbXBhY3RFc3RpbWF0b3I7"},{"version":3,"sources":["/Users/mac/Documents/projects/buildForSDG-assesement-submission/src/estimator.js"],"names":["getFactor","periodType","time","factor","Math","floor","convertToDays","numOfDays","covid19ImpactEstimator","data","input","timeToElapse","impact","currentlyInfected","reportedCases","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","trunc","totalHospitalBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","region","avgDailyIncomePopulation","avgDailyIncomeInUSD","severeImpact"],"mappings":";;AAAA,SAASA,SAAT,CAAmBC,UAAnB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIC,MAAJ;;AACA,MAAIF,UAAU,KAAK,MAAnB,EAA2B;AACzBE,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,CAAlB,CAAT;AACD,GAFD,MAEO,IAAID,UAAU,KAAK,OAAnB,EAA4B;AACjCE,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,CAAlB,CAAT;AACD,GAFM,MAEA,IAAID,UAAU,KAAK,QAAnB,EAA6B;AAClCE,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,CAAlB,CAAT;AACD,GAFM,MAEA;AACL,WAAO,mBAAP;AACD;;AAED,SAAOC,MAAP;AACD;;AAED,SAASG,aAAT,CAAuBL,UAAvB,EAAmCC,IAAnC,EAAyC;AACvC,MAAIK,SAAJ;;AACA,MAAIN,UAAU,KAAK,MAAnB,EAA2B;AACzBM,IAAAA,SAAS,GAAGL,IAAZ;AACD,GAFD,MAEO,IAAID,UAAU,KAAK,OAAnB,EAA4B;AACjCM,IAAAA,SAAS,GAAGL,IAAI,GAAG,CAAnB;AACD,GAFM,MAEA,IAAID,UAAU,KAAK,QAAnB,EAA6B;AAClCM,IAAAA,SAAS,GAAGL,IAAI,GAAG,EAAnB;AACD,GAFM,MAEA;AACL,WAAO,mBAAP;AACD;;AAED,SAAOK,SAAP;AACD;;AACD,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,IAAD,EAAU;AACvC,MAAMC,KAAK,GAAGD,IAAd;AACAC,EAAAA,KAAK,CAACC,YAAN,GAAqBL,aAAa,CAACI,KAAK,CAACT,UAAP,EAAmBS,KAAK,CAACC,YAAzB,CAAlC;AACA,SAAO;AACLF,IAAAA,IAAI,EAAEC,KADD;AAELE,IAAAA,MAAM,EAAE;AACNC,MAAAA,iBAAiB,EAAEH,KAAK,CAACI,aAAN,GAAsB,EADnC;;AAEN,UAAIC,yBAAJ,GAAgC;AAC9B,eAAO,KAAKF,iBAAL,YAA0B,CAA1B,EAA+Bb,SAAS,CAACU,KAAK,CAACT,UAAP,EAAmBS,KAAK,CAACC,YAAzB,CAAxC,CAAP;AACD,OAJK;;AAKN,UAAIK,0BAAJ,GAAiC;AAC/B,eAAOZ,IAAI,CAACC,KAAL,CAAY,KAAK,KAAKU,yBAAX,GAAwC,GAAnD,CAAP;AACD,OAPK;;AAQN,UAAIE,2BAAJ,GAAkC;AAChC,eAAOb,IAAI,CAACc,KAAL,CAAY,KAAKR,KAAK,CAACS,iBAAZ,GAAiC,GAAjC,GACf,KAAKH,0BADD,CAAP;AAED,OAXK;;AAYN,UAAII,0BAAJ,GAAiC;AAC/B,eAAOhB,IAAI,CAACC,KAAL,CAAY,IAAI,KAAKU,yBAAV,GAAuC,GAAlD,CAAP;AACD,OAdK;;AAeN,UAAIM,kCAAJ,GAAyC;AACvC,eAAOjB,IAAI,CAACC,KAAL,CAAY,IAAI,KAAKU,yBAAV,GAAuC,GAAlD,CAAP;AACD,OAjBK;;AAkBN,UAAIO,eAAJ,GAAsB;AACpB,eAAOlB,IAAI,CAACc,KAAL,CAAY,KAAKH,yBAAL,GAAiCL,KAAK,CAACa,MAAN,CAAaC,wBAA9C,GACjBd,KAAK,CAACa,MAAN,CAAaE,mBADG,GACoBf,KAAK,CAACC,YADrC,CAAP;AAED;;AArBK,KAFH;AAyBLe,IAAAA,YAAY,EAAE;AACZb,MAAAA,iBAAiB,EAAEH,KAAK,CAACI,aAAN,GAAsB,EAD7B;;AAEZ,UAAIC,yBAAJ,GAAgC;AAC9B,eAAO,KAAKF,iBAAL,YAA0B,CAA1B,EAA+Bb,SAAS,CAACU,KAAK,CAACT,UAAP,EAAmBS,KAAK,CAACC,YAAzB,CAAxC,CAAP;AACD,OAJW;;AAKZ,UAAIK,0BAAJ,GAAiC;AAC/B,eAAOZ,IAAI,CAACC,KAAL,CAAY,KAAK,KAAKU,yBAAX,GAAwC,GAAnD,CAAP;AACD,OAPW;;AAQZ,UAAIE,2BAAJ,GAAkC;AAChC,eAAOb,IAAI,CAACc,KAAL,CAAa,KAAKR,KAAK,CAACS,iBAAZ,GAAiC,GAAlC,GACf,KAAKH,0BADD,CAAP;AAED,OAXW;;AAYZ,UAAII,0BAAJ,GAAiC;AAC/B,eAAOhB,IAAI,CAACC,KAAL,CAAY,IAAI,KAAKU,yBAAV,GAAuC,GAAlD,CAAP;AACD,OAdW;;AAeZ,UAAIM,kCAAJ,GAAyC;AACvC,eAAOjB,IAAI,CAACC,KAAL,CAAY,IAAI,KAAKU,yBAAV,GAAuC,GAAlD,CAAP;AACD,OAjBW;;AAkBZ,UAAIO,eAAJ,GAAsB;AACpB,eAAOlB,IAAI,CAACc,KAAL,CAAY,KAAKH,yBAAL,GAAiCL,KAAK,CAACa,MAAN,CAAaC,wBAA9C,GACjBd,KAAK,CAACa,MAAN,CAAaE,mBADG,GACoBf,KAAK,CAACC,YADrC,CAAP;AAED;;AArBW;AAzBT,GAAP;AAiDD,CApDD;;AAsDA,eAAeH,sBAAf","sourcesContent":["function getFactor(periodType, time) {\n  let factor;\n  if (periodType === 'days') {\n    factor = Math.floor(time / 3);\n  } else if (periodType === 'weeks') {\n    factor = Math.floor(time / 3);\n  } else if (periodType === 'months') {\n    factor = Math.floor(time / 3);\n  } else {\n    return 'Invalid data type';\n  }\n\n  return factor;\n}\n\nfunction convertToDays(periodType, time) {\n  let numOfDays;\n  if (periodType === 'days') {\n    numOfDays = time;\n  } else if (periodType === 'weeks') {\n    numOfDays = time * 7;\n  } else if (periodType === 'months') {\n    numOfDays = time * 30;\n  } else {\n    return 'Invalid data type';\n  }\n\n  return numOfDays;\n}\nconst covid19ImpactEstimator = (data) => {\n  const input = data;\n  input.timeToElapse = convertToDays(input.periodType, input.timeToElapse);\n  return {\n    data: input,\n    impact: {\n      currentlyInfected: input.reportedCases * 10,\n      get infectionsByRequestedTime() {\n        return this.currentlyInfected * (2 ** getFactor(input.periodType, input.timeToElapse));\n      },\n      get severeCasesByRequestedTime() {\n        return Math.floor((15 * this.infectionsByRequestedTime) / 100);\n      },\n      get hospitalBedsByRequestedTime() {\n        return Math.trunc((35 * input.totalHospitalBeds) / 100\n         - this.severeCasesByRequestedTime);\n      },\n      get casesForICUByRequestedTime() {\n        return Math.floor((5 * this.infectionsByRequestedTime) / 100);\n      },\n      get casesForVentilatorsByRequestedTime() {\n        return Math.floor((2 * this.infectionsByRequestedTime) / 100);\n      },\n      get dollarsInFlight() {\n        return Math.trunc((this.infectionsByRequestedTime * input.region.avgDailyIncomePopulation\n        * input.region.avgDailyIncomeInUSD) / input.timeToElapse);\n      }\n    },\n    severeImpact: {\n      currentlyInfected: input.reportedCases * 50,\n      get infectionsByRequestedTime() {\n        return this.currentlyInfected * (2 ** getFactor(input.periodType, input.timeToElapse));\n      },\n      get severeCasesByRequestedTime() {\n        return Math.floor((15 * this.infectionsByRequestedTime) / 100);\n      },\n      get hospitalBedsByRequestedTime() {\n        return Math.trunc(((35 * input.totalHospitalBeds) / 100)\n         - this.severeCasesByRequestedTime);\n      },\n      get casesForICUByRequestedTime() {\n        return Math.floor((5 * this.infectionsByRequestedTime) / 100);\n      },\n      get casesForVentilatorsByRequestedTime() {\n        return Math.floor((2 * this.infectionsByRequestedTime) / 100);\n      },\n      get dollarsInFlight() {\n        return Math.trunc((this.infectionsByRequestedTime * input.region.avgDailyIncomePopulation\n        * input.region.avgDailyIncomeInUSD) / input.timeToElapse);\n      }\n    }\n  };\n};\n\nexport default covid19ImpactEstimator;\n"]}]}